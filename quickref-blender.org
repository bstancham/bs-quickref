#+title: Blender Quick-Reference

* Installation & Setup
December 2021:
- Blender version 3.0.0
- downloaded from website
- uncompressed in ~/Software
- double-click to run

* Basic Controls

Viewport Controls:
- Middle-Mouse = rotate
- Shift+Middle-Mouse = pan
- Ctrl+Middle-Mouse OR Mouse-Wheel = zoom

To Orbit Viewpoint:
click & drag on the Axes gizmo (in 3D Viewport)

Some Keyboard Shortcuts:
- x = delete
- Shift+a = add
- Shift+r = repeat last action

- Alt+g = reset position of object
- Alt+r = reset rotation of object

* Blender UI

Ctrl+Space = toggle fullscreen (for panel with mouse over)

Shift+c = return 3D cursor to the origin and reset view

* Walk/Fly Navigation

walk or fly around scene like a computer game:
- View-->Navigation-->Walk Navigation
- View-->Navigation-->Fly Navigation

Controls (General):
- wsad
- q/e = move up/down
- LeftClick = confirm new view
- RighClick OR Esc = cancel and return to old view
- WheelUp/WheelDown = increase/decrease speed
- Shift = speed up temporarily
- Alt = slow down temporarily

Controls (Walk):
- Space = teleport to location at crosshairs
- Tab = toggle gravity
- v = jump (when gravity is off)

Controls (Fly):
- in Fly Navigation you have momentum
- Ctrl = disable rotation (so you can do a fly-by)

* Preferences

Emulate Numpad (useful for laptop):
- Edit-->Preferences-->Input

Scale interface (text etc):
- Edit-->Preferences-->Interface

* Modes
- Object Mode
- Edit Mode

* Modelling
** Misc

Create a cylinder with segments:
- Add-->Mesh-->Cylinder
- switch to Edit Mode/Edges
- switch to wireframe view (so we can select hidden edges)
- LeftClick & drag to select all edges except for end caps
- RightClick-->Subdivide

** Editing Shapes

(in edit mode)

delete vs dissolve:
- DELETE will leave a hole in your model
- DISSOLVE will join faces together to leave surface intact
- delete/dissove vertices/edges/faces in edit mode

moving vertices around (use proportional editing to drag along nearby vertices as well):
- in edit mode
- turn proportional editing on
- select some vertices
- g - to move
- mouse wheel to change radius of proportional editing effect

shrink/fatten (Alt-S):
- in edit mode
- select some vertices
- alt-s - to move along direction of normals

select random vertices/edges/faces:
- in edit mode
- Select-->Random

Separate part into new mesh:
- RightClick-->Separate-->Selection
- RightClick-->Separate-->Loose Parts

More shape-editing methods:
- knife cut
- bisect
- bevel loop cuts
- auto-smooth - automatically chooses which angles to smooth based on maximum angle
- dissolve edges (instead of delete edges)
- bend - shift-W
- shrink - shrink/fatten
- bridge faces
- bridge edge loops

** Cuboid Operations (Rapid Build Rectilinear Forms)
- start with a cube
- Edit Mode/Faces
- Extrude Region (e)
- Inset Faces (i)
- loop cut (Ctrl+r)

** Sculpting

Stroke-->Stroke Methods
- Space/Airbrush etc

* Selecting

Ctrl+i = inverse selection

Select only linked/connected parts:
- Ctrl-L

Select vertices all the way through an object:
- switch to x-ray mode
- make box-selection as normal

Make selected vertices into a new separate object
- select vertices
- duplicate (Shift-D)
- p (to make part of an object into a new object)
  - choose 'selection'

Select shortest path of faces/edges:
- select face/edge
- Ctrl+LeftClick

More selection methods:
- select linked flat faces (can adjust sharpness)
- select linked (apply limits, materials/seams etc)
- select boundary loops
- circle select - click and drag to "paint" selection area

* Modifiers
** Introduction

Add a modifier:
- In the inspector, go to Modifier Properties (the single-spanner symbol)
- click Add Modifier

Applying Modifiers:
- applying modifiers will make things easier for the computer because all the
  modifiers don't have to be generated on the fly anymore
- cons: can no longer edit modifier parameters

Other things to bear in mind:
- can change the order of modifiers

** Boolean Modifiers

- need two geometry objects
- Add Modifier-->Boolean

** Symmetry (Mirror Modifier)

MIRROR SYMMETRY:
- Add Modifier-->Generate-->Mirror

RADIAL SYMMETRY is a bit more tricky to do - here is one good method:
- add Empty-->Plain Axes (just for reference point as centre for rotation -
  could also just use origin)
- make something, then move it away from the origin a bit
- make as many instances of the thing as you need e.g. 4 extra copies for five-fold radial symmetry
- calculate the number of degrees to rotate each e.g. 360/5 for five-fold radial symmetry
- select the first instance and rotate by chosen amount e.g. 360/5 degrees
- select next instance and use Shift-r (repeat last action) twice, thrice, etc...
- using instances, so can still edit as one :-)

** Skin Modifier (Add Skin to a Path)

EXAMPLE: Making a Low-Poly Tree:
- Start with a single vertex
  - add cube (Shift-A --> mesh --> cube)
  - (Edit Mode/Vertices) RightClick-->Merge Vertices (to end up with a single vertex)
- build skeleton of tree
  - Ctrl+RightClick to add connected vertex/edge to current vertex
- Add Modifier-->Generate-->Skin
  - switch to wireframe mode (so that we can see the skeleton vertices)
  - select any vertex
  - press Ctrl-A to scale the skin around the vertex
    - make each section as thick or thin as you like
- uses square section by default - for a rounder cross section:
  - Add Modifier-->Generate-->Subdivision

** Convert to Voxels (Remesh Modifier)
Add Modifier-->Generate-->Remesh
- Select "Blocks"
- "Octree Depth" sets the size of the blocks

** Make Model Smoother (Mesh Subdivision)
- Add Modifier-->Generate-->Subdivision

* Rendering
** Introduction

F12 to start rendering
ESC to stop

Tips:
- render with transparent background

** Rendering Engines
*** Builtin Renderers: WORKBENCH
Useful when you need a responsive UI and don't need to see a realistic preview.

*** Builtin Renderers: EEVEE (Realtime Rendering)
This is similar to what you'd get in a game engine e.g. Unreal or Unity.

*** Builting Renderers: CYCLES (Raytracing)
Raytracing is more realistic, but not realtime.

How to make rendering faster (good for use in viewport):
- set max samples count low
- then add denoiser

Denoiser should help to get rid of those little specks in the rendered image.

More handy settings:
- noise threshold
- max/min samples (adaptive sampling may be used to reduce number of samples in easy-to-render areas)
- time limit (stop rendering after set time limit)

*** External Renderers
External rendering engines are available.

* World Properties
- lighting strength

* Camera

Toggle camera view:
- 0 on numpad
- or use the little icon in the viewport

Moving the camera:
- in camera view
- select the box
- press g, then move the mouse
- to zoom:
  - (after pressing g)
  - press middle mounse button, then move mouse

Set camera position to current view:
- View-->Align View-->AlignActive Camera to View
- OR Ctrl+Alt+Numpad0

* Material Properties
** Surface
Principled BSDF is a general purpose shader which includes most of the usual stuff

** Bump Maps/Displacement Maps



** Normal Maps

* EXAMPLE: Making Pointy Tree
** v1
- make point at origin
- (edit/vertices mode) extend upwards - 1 edge
- select edge
- subdivide edge
- Add Modifier-->Generate-->Skin
- wireframe view
- expand/shrink vertices to make long point (Shift-a, or Ctrl+a?)
- Add Modifier-->Generate-->Subdivision
- Add Modifier-->Deform-->Simple Bend

add displacement map
- texture is saved as jpg
- Add Modifier-->Deform-->Displace
- (might also add Displacement Map using nodes editor (maybe more common))
-

** v2
trunk:
- tall cone
  - 50m tall
  - subdivide long edges (20 subdivisions) (select edges in wireframe view)

branches:
- separate top part of trunk into new mesh and rename as "Branch"
  - Edit/Edges
  - select upper 1/3
  - RightClick-->Separate-->Selection
- give branch a nice bend
  - Add-->Empty-->Plain Axes (this will be the origin for the bend)
  - position at base of branch (for me, was [0, 0, 33])
  - select branch and add modifier: Deform-->Simple Deform
  - select the "Bend" box
  - amount was 20
- apply the bend modifier - otherwise the rotation step won't work
- duplicate and rotate
  - create 5 additional instances of branch
  - rotate around the z axis
  - angle-step for 6 instances is 60 degrees
- doing the rotation
  - select object
  - put mouse inside the scene window
  - press r (rotate)
  - press z (constrain to z axis)
  - type amount e.g. 60
  - press enter

foliage:
- cone: upside-down & truncated
  - 5m tall
  - 5m top radius
  - 3m bottom radius

* Lighting

- sun is very bright!
- spot
- point light

* 2D Shapes

Draw outline in SVG program such as Inkscape

import SVG - imports as curves by default --> convert to mesh etc

grid-fill - fill 2D shape with quads

* Bezier Curve

Shift-A --> add curve/bezier curve

Switch to edit mode (TAB)

Select control point(s) and press G to move them

EXTENDING/ADDING MORE NODES
- (in edit mode)
- select an end point
- press E, or R-Click-->Extrude Curve and Move

* Extrude Profile Along Curve

To do this, we need two curve objects.

Make path:
- make a bezier curve

Make profile to be extruded:
- make a circle
- convert to curve
  - in object mode
  - Convert To-->Curve
  - icon should change to the curve symbol

Extrude profile along path:
- select the bezier curve
- Object Data Properties (curve symbol with little squares at endpoints)
  - Geometry-->Bevel
    - choose "Object" and select the circle, either by choosing it from the list
      or by using the eyedropper thingy

* Repeat an Object Along a Curve

NOTE: want CURVE and MESH to both be in same location, otherwise there will be
offset, which is usually undesirable

create a curve
- make sure location is at the origin

create a mesh object
- make sure that it is centred at the origin, otherwise it will be offset when
  we add it to the path

add an array modifier to the mesh
- set relative offset to reflect the axis of the mesh which you want to extend along
- set Fit Type to Fit Curve
- select the our curve - now the length of the array will be the same as the length of the curve (the shape doesn't follow yet)

add a curve modifier to the mesh
- select the curve object

That should do it!

* Scripting in Python
** Introduction

API documentation: https://docs.blender.org/api/current/
API quickstart: https://docs.blender.org/api/current/info_quickstart.html

Tips:
- use the python console to learn names of objects, methods etc
- flow chart/nodes view

** Deleting an Object (NOT TESTED)
bpy.ops.object.delete(use_global=False)

** Data Access
Accessing data from the currently loaded blend-file is done with the module bpy.data

: bpy.data.objects

: bpy.data.scenes

: bpy.data.materials

Access items in collections by string or by index --> WARNING! index of a member
may change while running blender:

: list(bpy.data.objects)

: bpy.data.objects['Cube']

: bpy.data.objects[0]

CREATE OR REMOVE DATA OBJECTS

New bpy.data objects cannot be created directly - add or remove by using methods
in the collections:

: mesh = bpy.data.meshes.new(name="MyMesh")

: bpy.data.meshes.remove(mesh)

CONTEXT (GET USER SELECTION & OTHER THINGS RELATED TO CURRENT EDITOR CONTEXT)

: bpy.context.object

: bpy.context.selected_objects

: bpy.context.visible_bones

OPERATORS (Tools)

Operators are tools generally accessed by the user from buttons, menu items or
key shortcuts. From the user perspective they are a tool but Python can run
these with its own settings through the bpy.ops module.

: bpy.ops.mesh.flip_normals()

: bpy.ops.mesh.hide(unselected=False)

: bpy.ops.object.transform_apply()

OPERATOR POLL

Many operators have a “poll” function which checks if the cursor is in a valid
area or if the object is in the correct mode (Edit Mode, Weight Paint Mode,
etc). When an operator’s poll function fails within Python, an exception is
raised.

For example, calling bpy.ops.view3d.render_border() from the console raises the following error:

RuntimeError: Operator bpy.ops.view3d.render_border.poll() failed, context is incorrect
In this case the context must be the 3D Viewport with an active camera.

Can do something like this:
#+BEGIN_SRC python
if bpy.ops.view3d.render_border.poll():
    bpy.ops.view3d.render_border()
#+END_SRC

* Script Examples
** Add Random Cuboids
#+BEGIN_SRC python
import bpy
from random import randint

# add 5 cuboids at random locations
for c in range(0, 5):
    x = randint(-10, 10)
    y = randint(-10, 10)
    z = randint(-10, 10)
    bpy.ops.mesh.primitive_cube_add(location=(x, y, z), scale(0.5, 6, 0.5))
#+END_SRC

** Add a Cuboid, then Subtract Parts of it Using Boolean Difference
#+BEGIN_SRC python
  import bpy

  # add cuboid and save references to it in a variable (cuboid will be selected
  # automatically when added so can just get first selected object)
  bpy.ops.mesh.primitive_cube_add(location=(5, 5, 5), scale=(0.5, 10, 0.5))
  c1 = bpy.context.selected_objects[0]

  for i in range(5):

      bpy.ops.mesh.primitive_cube_add(location=(5.2, 3 + (i * 2), 5), scale=(0.5, 0.5, 4))
      c2 = bpy.context.selected_objects[0]

      # perform boolean operation
      # - add new boolean modifier to c1
      # - set c2 as the OBJECT of the modifier
      # - set boolean operation to DIFFERENCE, then apply
      boolMod = c1.modifiers.new('bool_diff', 'BOOLEAN')
      boolMod.object = c2
      boolMod.operation = 'DIFFERENCE'
      bpy.ops.object.modifier_apply(modifier='bool_diff')

      # need to hide c2 or we won't be able to see the effect
      c2.hide_set(True)
#+END_SRC

** Switch Mode, Do Something, Then Return to Original Mode
#+BEGIN_SRC python
import bpy
oldMode = bpy.context.mode
bpy.ops.object.mode_set(mode='OBJECT')

bpy.ops.object.mode_set(mode=oldMode)
#+END_SRC

** Make a Curved Path, Ten Add a Bunch of Spheres Along It
#+BEGIN_SRC python
  import bpy

  def create_curve(coords_list):
      crv = bpy.data.curves.new('crv', 'CURVE')
      crv.dimensions = '3D'
      spline = crv.splines.new(type='NURBS')
      spline.use_endpoint_u = True
      spline.points.add(len(coords_list) - 1)
      for p, new_co in zip(spline.points, coords_list):
          p.co = (new_co + [1.0])  # (add nurbs
      obj = bpy.data.objects.new('object_name', crv)
      bpy.data.scenes[0].collection.objects.link(obj)

  coords = []
  coords.append([0,0,0])
  coords.append([0,0,1])
  coords.append([1.079576297914498, 0.12957629791449818, 1])
  coords.append([1.796242964581165, -0.5870903687521685, 1])

  create_curve(coords)



# make mesh object and create an array following curve

  bpy.ops.mesh.primitive_cube_add(enter_editmode=False, align='WORLD', location=(0, 0, 0), scale=(0.1, 0.1, 0.1))

  bpy.ops.object.modifier_add(type='ARRAY')

  bpy.context.object.modifiers["Array"].fit_type = 'FIT_CURVE'
  bpy.context.object.modifiers["Array"].curve = bpy.data.objects["object_name"]
  bpy.context.object.modifiers["Array"].relative_offset_displace[0] = 1.5

  bpy.ops.object.modifier_add(type='CURVE')
  bpy.context.object.modifiers["Curve"].object = bpy.data.objects["object_name"]

#+END_SRC

** Make Spheres Within a Cuboid Area and Add Them with Boolean Union
NOTE: need to CONVERT TO MESH so that I can get rid of all the boolean
operations and dependent objects, but that part of script doesn't work yet!
#+BEGIN_SRC python
import bpy
#from random import randint
from random import uniform as randfloat

agregate = None

# add some spheres
for c in range(0, 5):
    x = randfloat(-1, 1)
    y = randfloat(-1, 1)
    z = randfloat(0, 0.2)
    bpy.ops.mesh.primitive_uv_sphere_add(location=(x, y, z), scale=(1, 1, 1))

    if agregate == None:
        agregate = bpy.context.selected_objects[0]
        agregate.name = "agregate"
    else:
        temp = bpy.context.selected_objects[0]
        unionMod = agregate.modifiers.new('bool_union', 'BOOLEAN')
        unionMod.object = temp
        unionMod.operation = 'UNION'
        bpy.ops.object.modifier_apply(modifier='bool_union')
        temp.hide_set(True)


#bpy.ops.object.select_all(action='DESELECT')
##bpy.ops.outliner.item_activate(deselect_all=True)

#agregate = bpy.data.objects["agregate"]
#agregate.select_set(True)
#bpy.ops.object.convert(target='MESH')

#finalMesh = bpy.context.selected_objects[0]
#finalMesh.name = 'final_mesh'

#bpy.ops.object.convert(target='MESH')

#finalMesh = bpy.context.selected_objects[0]
#finalMesh.name = 'final_mesh'

#+END_SRC

** Create New UV Sphere Primitive & Add as Boolean Modifier to Existing Scene Object

USAGE:
- change name "subtractive01" to name of whichever object you want to add subtractive modifer to
- change type of primitive, location & size if required

#+BEGIN_SRC python
import bpy

obj = bpy.data.objects['subtractive01']

bpy.ops.mesh.primitive_uv_sphere_add(location=(5.2, 3, 5), scale=(2, 2, 2))
obj2 = bpy.context.selected_objects[0]

boolMod = obj.modifiers.new('bool_diff', 'BOOLEAN')
boolMod.object = obj2
boolMod.operation = 'DIFFERENCE'
bpy.ops.object.modifier_apply(modifier='bool_diff')
#+END_SRC


subtractive boolean operation, then convert to mesh and delete the subtraction object
#+BEGIN_SRC python
  import bpy

  # add cuboid and save references to it in a variable (cuboid will be selected
  # automatically when added so can just get first selected object)
  bpy.ops.mesh.primitive_cube_add(location=(5, 5, 5), scale=(0.5, 10, 0.5))
  base_object = bpy.context.selected_objects[0]
  base_object.name = 'base_object'

  bpy.ops.mesh.primitive_cube_add(location=(5.2, 3, 5), scale=(0.5, 0.5, 4))
  temp = bpy.context.selected_objects[0]

  # perform boolean operation
  # - add new boolean modifier to base_object
  # - set temp as the OBJECT of the modifier
  # - set boolean operation to DIFFERENCE, then apply
  boolMod = base_object.modifiers.new('bool_diff', 'BOOLEAN')
  boolMod.object = temp
  boolMod.operation = 'DIFFERENCE'
  bpy.ops.object.modifier_apply(modifier='bool_diff')

  # convert base_object to mesh - gets rid of dependency on boolean modifier, so
  # that we can delete the temp object
  bpy.ops.object.select_all(action='DESELECT')
  base_object.select_set(True)
  bpy.context.view_layer.objects.active = base_object
  bpy.ops.object.convert(target='MESH')

  # delete temporary object
  bpy.ops.object.select_all(action='DESELECT')
  temp.select_set(True)
  bpy.ops.object.delete(use_global=False)
#+END_SRC


creating random step patterns by boolean union

#+BEGIN_SRC python
  # build random stairs by boolean union

  import bpy
  from random import random as rand

  # dimensions in metres
  base_unit_size = 2
  step_size = 0.2

  # makes base shape at given location and returns the resulting object
  def create_base_shape(x, y, z):
      #bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, z), scale=(base_unit_size, base_unit_size, step_size * 2))
      bpy.ops.mesh.primitive_cube_add(size=base_unit_size, location=(x, y, z))
      return bpy.context.selected_objects[0]

  # init point at origin
  x = 0
  y = 0
  z = 0

  xStep = 0;
  yStep = 0;
  zStep = 0;

  # create base shape at start position
  base = create_base_shape(x, y, z)
  base.name = "base_shape"

  # adds a step at the current point
  def add_step():
      temp = create_base_shape(x, y, z)

      # perform boolean operation
      # - add new boolean modifier to base_object
      # - set temp as the OBJECT of the modifier
      # - set boolean operation to DIFFERENCE, then apply
      boolMod = base.modifiers.new('bool_diff', 'BOOLEAN')
      boolMod.object = temp
      boolMod.operation = 'UNION'
      bpy.ops.object.modifier_apply(modifier='bool_diff')

      # convert base_object to mesh - gets rid of dependency on boolean modifier, so
      # that we can delete the temp object
      bpy.ops.object.select_all(action='DESELECT') # select NONE
      base.select_set(True)
      bpy.context.view_layer.objects.active = base
      bpy.ops.object.convert(target='MESH')

      # delete temporary object
      bpy.ops.object.select_all(action='DESELECT')
      temp.select_set(True)
      bpy.ops.object.delete(use_global=False)

  def invert_step_amount(val):
      if (val > 0):
          return 0
      else:
          return step_size

  # make some steps
  for i in range(10):
      if (rand() < 0.5):
          xStep = invert_step_amount(xStep)
      if (rand() < 0.5):
          yStep = invert_step_amount(yStep)
      if (rand() < 0.5):
          zStep = invert_step_amount(zStep)
      x += xStep
      y += yStep
      z += zStep
      add_step()
#+END_SRC

heavy roof made out of spheres
chimney created with cosine function
#+BEGIN_SRC python

  import bpy
  from random import uniform as randfloat
  import math

  # # dimensions in metres
  # base_unit_size = 2
  # step_size = 0.2

  # # makes base shape at given location and returns the resulting object
  # def create_base_shape(x, y, z):
  #     #bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, z), scale=(base_unit_size, base_unit_size, step_size * 2))
  #     bpy.ops.mesh.primitive_cube_add(size=base_unit_size, location=(x, y, z))
  #     return bpy.context.selected_objects[0]

  # # init point at origin
  # x = 0
  # y = 0
  # z = 0

  # xStep = 0;
  # yStep = 0;
  # zStep = 0;

  # # create base shape at start position
  # base = create_base_shape(x, y, z)
  # base.name = "base_shape"


  def create_unit():
      r = randfloat(0.5, 1.5)
      x = randfloat(-5, 5)
      y = randfloat(-5, 5)
      dist = math.sqrt(x * x + y * y) / 5
      z = 0
      if (1 - dist > 0):
          z = math.sin(1 - dist) * 5
      bpy.ops.mesh.primitive_uv_sphere_add(radius=r, location=(x, y, z))
      return bpy.context.selected_objects[0]

  def bool_union(base_object, union_object):
      # perform boolean operation
      # - add new boolean modifier to base_object
      # - set temp as the OBJECT of the modifier
      # - set boolean operation to UNION, then apply
      boolMod = base_object.modifiers.new('bool_mod', 'BOOLEAN')
      boolMod.object = union_object
      boolMod.operation = 'UNION'
      bpy.ops.object.modifier_apply(modifier='bool_mod')

      # convert base_object to mesh - gets rid of dependency on boolean modifier, so
      # that we can delete the temp object
      bpy.ops.object.select_all(action='DESELECT') # select NONE
      base_object.select_set(True)
      bpy.context.view_layer.objects.active = base_object
      bpy.ops.object.convert(target='MESH')

  def delete_object(obj):
      bpy.ops.object.select_all(action='DESELECT')
      obj.select_set(True)
      bpy.ops.object.delete(use_global=False)

  base = create_unit()
  for i in range(10):
      temp = create_unit()
      bool_union(base, temp)
      delete_object(temp)
#+END_SRC
* Donut Tutorial
up to part 7 (texturing)
https://www.youtube.com/watch?v=CmrAv8TSAao

Dragging donut icing:
- snap to face
- project individual elements

* 100 Blender Tips Video
- drag and drop materials
- copy to selected
- backspace to reset parameters
- color ramp node
- use image as a colour palette
- convert texture to normal map
- snap view to face (shift/numpad key)
- use "instance" (Alt+d) instead of "duplicate" (Shift+d)
- radial symmetry - for sculpting
- recalculate normals
- ray visibility options (cycles renderer)
- display all UVs
- animating in edit mode
- follow path constraint - offset value
- snapping settings - snap to face, edge, vertex etc
- symmetrize
- transform locks

Addons
- boolTool (addon)
- scatter objects (addon)
- ivy generator addon
- node wrangler (addon) --> see any node on it's own
- hardOps/boxcutter (addons)
- discombobulator (addon)
- architecture addons - archimesh/archipack

* Getting (Free) Assets

Reccomendations from 100 blender tips video:
- HDRI - 360 view textures which contain lighting data - download from HDRI HAVEN
- pixabay - for good backgrounds
- textures.com - for good textures
- blendswap to get free models


- pexels
- https://cloud.blender.org/p/textures (have to create an account and sign in)
