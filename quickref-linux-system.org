==== LINUX SYSTEM QUICKSTART GUIDE ===================================

LUBUNTU SYSTEM SHORTCUTS

CTRL+ALT+LEFT/RIGHT  --- switch workspace to left/right
ALT+SHIFT+LEFT/RIGHT --- move current window to workspace left/right
ALT+LEFT-MOUSE       --- move window
ALT+RIGHT-MOUSE      --- resize window

* ======================== EXTERNAL HARD DISK ========================
** exFAT filesystem
exFAT is like FAT32 but without the 4GB file size limit.

May have to install some packages to be able to use it.

$ sudo apt-get install exfat-fuse exfat-utils
** using EXT4
*** formatting it
Format HD same a would do a USB drive (see below)

# find out name using one of these
$ df -hT
$ sudo fdisk -l

# ... make sure that it is unmounted
$ sudo umount /dev/sdb

# ... format disk (using EXT4 filesystem)
$ sudo mkfs.ext4 /dev/sdb1

*** using it
Using EXT4 you will have to deal with unix file permissions, so it's not quite
as user friendly as FAT32...

System will probably automatically offer to open in file manager, however there
may be reasons to want to do it manually...

# make dir to mount in
$ sudo mkdir /mnt/sdb
# ... or...
$ sudo mkdir ~/hd

# mount filesystem
$ sudo mount /dev/sdb /mnt/sdb
# ... or...
$ sudo mount /dev/sdb ~/hd

*** make sure to unmount properly
EXT4 can sometimes be writing data in the background, so always make sure to
unmount properly before disconnecting.

$ sudo umount /mnt/sdb

or use Preferences-->Disks

* ==== FORMAT USB STICK ==============================================

FILESYSTEM TYPES:
- FAT  - MSDOS (will work on just about any computer)
- EXT4 - journalled linux filesystem (supports symlinks etc so good for backup)

GUI METHODS:
- Disks (gnome-disks)
- Disk Utility (gnome-disk-utility)
- gparted
-

TERMINAL METHOD:

# plug in usb stick...
# ... list disks and find name of usb stick
$ df -hT
# ... make sure that it is unmounted
$ sudo umount /dev/sdb1

# ... format disk (using FAT filesystem)
$ sudo mkfs.vfat -I /dev/sdb1
$ sudo mkfs.vfat -n bens_disk -I /dev/sdb1 # giving it a name also

# ... format disk (using EXT4 filesystem)
$ sudo mkfs.ext4 /dev/sdb1

* ============================== DMENU ==============================

* ==== MAKE BOOTABLE USB STICK FROM ISO FILE =========================

GUI:
Ubuntu
- System-->Administration-->Startup Disk Creator
Lubuntu 18.04
- System Tools-->Startup Disk Creator

... to boot from USB, will have to enable it in BIOS...

** getting into BIOS
restart and press key during boot...
- F2 on Acer Zenbook 13
- DELETE on MSI motherboard
- sometimes also then F10, F11 or F12

* ==== SYSTEM LOG FILES ==============================================

GUI (Ubuntu Mate 16.04): Applications-->System Tools-->Log File Viewer


TERMINAL:
... maybe look in /var/log

* ==== BOOT TO COMMAND LINE (instead of GUI) =========================

#### not tested any of this yet... some stuff I turned up while researching how to do it on raspberry Pi (on the Pi I used the nice easy setup tool, raspi-config)...

set to runlevel 3

$ startx # to start GUI

** Raspberry Pi

Interactive configuration utility...
$ sudo raspi-config

* ============================ RUN LEVELS ============================

| 0 | Halt                            | Shuts down system                                                              |
| 1 | Single-User Mode                | Does not configure network interfaces, start daemons, or allow non-root logins |
| 2 | Multi-User Mode                 | Does not configure network interfaces or start daemons.                        |
| 3 | Multi-User Mode with Networking | Starts the system normally.                                                    |
| 4 | Undefined                       | Not used/User-definable                                                        |
| 5 | X11                             | As runlevel 3 + display manager(X)                                             |
| 6 | Reboot                          | Reboots the system                                                             |

Show current runlevel
$ runlevel

or
$ who -r

* ==== DISABLE SPLASH SCREEN AND SEE BOOT TEXT =======================

... edit /etc/default/grub using gksu...

... or via tramp in emacs:
C-x C-f /sudo::/etc/default/grub

... change value of GRUB_CMDLINE_LINUX_DEFAULT from "quiet splash" to ""...

... then...
$ sudo update-grub2



FOR MORE INFO:
... info-->GRUB-->Configuration-->Simple_configuration

* ==== ADD DIR TO $PATH ==============================================

TEMPORARY:
$ export PATH=$PATH:/path/to/dir

PERMANENT:
... add to this file... (RESTART NEEDED)
~/.profile
... or, if it exists...
~/.bash_profile

* ==== MANAGING ALTERNATIVES =========================================

EXAMPLE: switching between different java versions...

$ sudo update-alternatives --config java

... --config option gives an interactive menu to choose which version to use...

** manually addding a new alternative
see update-alternatives manpage...

EXAMPLE: adding a new manually installed java runtime (jre)

$ sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jre-10.0.2/bin/java 350

... --install option to add a new alternative

* ================== LINUX FILESYSTEM ORGANISATION ===================
** TRASH
A user's trash folder is located at ~/.local/share/Trash

** BINARIES
Please refer to the Filesystem Hierarchy Standard (FHS) for Linux for this.

    /bin : For binaries usable before the /usr partition is mounted. This is used for trivial binaries used in the very early boot stage or ones that you need to have available in booting single-user mode. Think of binaries like cat, ls, etc.

    /sbin : Same, but for scripts with superuser (root) privileges required.

    /usr/bin : Same as first, but for general system-wide binaries.

    /usr/sbin : Same as above, but for scripts with superuser (root) privileges required.

** ROOT FILESYSTEM OVERVIEW
Taken from: https://www.linux.com/training-tutorials/linux-filesystem-explained/

*** /bin
/bin is the directory that contains binaries, that is, some of the applications
and programs you can run. You will find the ls program mentioned above in this
directory, as well as other basic tools for making and removing files and
directories, moving them around, and so on. There are more bin directories in
other parts of the file system tree, but we’ll be talking about those in a
minute.

*** /boot 
The /boot directory contains files required for starting your system. Do I have
to say this? Okay, I’ll say it: DO NOT TOUCH!. If you mess up one of the files
in here, you may not be able to run your Linux and it is a pain to repair. On
the other hand, don’t worry too much about destroying your system by accident:
you have to have superuser privileges to do that.

*** /dev
/dev contains device files. Many of these are generated at boot time or even on
the fly. For example, if you plug in a new webcam or a USB pendrive into your
machine, a new device entry will automagically pop up here.

*** /etc 
/etc is the directory where names start to get confusing. /etc gets its name
from the earliest Unixes and it was literally “et cetera” because it was the
dumping ground for system files administrators were not sure where else to put.

Nowadays, it would be more appropriate to say that etc stands for “Everything to
configure,” as it contains most, if not all system-wide configuration files. For
example, the files that contain the name of your system, the users and their
passwords, the names of machines on your network and when and where the
partitions on your hard disks should be mounted are all in here. Again, if you
are new to Linux, it may be best if you don’t touch too much in here until you
have a better understanding of how things work.

*** /home
/home is where you will find your users’ personal directories. In my case, under
/home there are two directories: /home/paul, which contains all my stuff; and
/home/guest, in case anybody needs to borrow my computer.

*** /lib
/lib is where libraries live. Libraries are files containing code that your
applications can use. They contain snippets of code that applications use to
draw windows on your desktop, control peripherals, or send files to your hard
disk.

There are more lib directories scattered around the file system, but this one,
the one hanging directly off of / is special in that, among other things, it
contains the all-important kernel modules. The kernel modules are drivers that
make things like your video card, sound card, WiFi, printer, and so on, work.

*** /lost+found (recovered files)
Each Linux file system has a lost+found directory. If the file system crashes, a
file system check will be performed at next boot. Any corrupted files found will
be placed in the lost+found directory, so you can attempt to recover as much
data as possible.

*** /media 
The /media directory is where external storage will be automatically mounted
when you plug it in and try to access it. As opposed to most of the other items
on this list, /media does not hail back to 1970s, mainly because inserting and
detecting storage (pendrives, USB hard disks, SD cards, external SSDs, etc) on
the fly, while a computer is running, is a relatively new thing.

*** /mnt 
The /mnt directory, however, is a bit of remnant from days gone by. This is
where you would manually mount storage devices or partitions. It is not used
very often nowadays.

*** /opt 
The /opt directory is often where software you compile (that is, you build
yourself from source code and do not install from your distribution
repositories) sometimes lands. Applications will end up in the /opt/bin
directory and libraries in the /opt/lib directory.

A slight digression: another place where applications and libraries end up in is
/usr/local, When software gets installed here, there will also be /usr/local/bin
and /usr/local/lib directories. What determines which software goes where is how
the developers have configured the files that control the compilation and
installation process.

*** /proc
/proc, like /dev is a virtual directory. It contains information about your
computer, such as information about your CPU and the kernel your Linux system is
running. As with /dev, the files and directories are generated when your
computer starts, or on the fly, as your system is running and things change.

*** /root 
/root is the home directory of the superuser (also known as the “Administrator”)
of the system. It is separate from the rest of the users’ home directories
BECAUSE YOU ARE NOT MEANT TO TOUCH IT. Keep your own stuff in you own
directories, people.

*** /run
/run is another new directory. System processes use it to store temporary data
for their own nefarious reasons. This is another one of those DO NOT TOUCH
folders.

*** /sbin
/sbin is similar to /bin, but it contains applications that only the superuser
(hence the initial s) will need. You can use these applications with the sudo
command that temporarily concedes you superuser powers on many
distributions. /sbin typically contains tools that can install stuff, delete
stuff and format stuff. As you can imagine, some of these instructions are
lethal if you use them improperly, so handle with care.

*** /usr 
The /usr directory was where users’ home directories were originally kept back
in the early days of UNIX. However, now /home is where users kept their stuff as
we saw above. These days, /usr contains a mish-mash of directories which in turn
contain applications, libraries, documentation, wallpapers, icons and a long
list of other stuff that need to be shared by applications and services.

You will also find bin, sbin and lib directories in /usr. What is the difference
with their root-hanging cousins? Not much nowadays. Originally, the /bin
directory (hanging off of root) would contain very basic commands, like ls, mv
and rm; the kind of commands that would come pre-installed in all UNIX/Linux
installations, the bare minimum to run and maintain a system. /usr/bin on the
other hand would contain stuff the users would install and run to use the system
as a work station, things like word processors, web browsers, and other apps.

But many modern Linux distributions just put everything into /usr/bin and have
/bin point to /usr/bin just in case erasing it completely would break
something. So, while Debian, Ubuntu and Mint still keep /bin and /usr/bin (and
/sbin and /usr/sbin) separate; others, like Arch and its derivatives just have
one “real” directory for binaries, /usr/bin, and the rest or *bins are “fake”
directories that point to /usr/bin.

*** /srv
The /srv directory contains data for servers. If you are running a web server
from your Linux box, your HTML files for your sites would go into /srv/http (or
/srv/www). If you were running an FTP server, your files would go into /srv/ftp.

*** /sys
/sys is another virtual directory like /proc and /dev and also contains
information from devices connected to your computer.

In some cases you can also manipulate those devices. I can, for example, change
the brightness of the screen of my laptop by modifying the value stored in the
/sys/devices/pci0000:00/0000:00:02.0/drm/card1/card1-eDP-1/intel_backlight/brightness
file (on your machine you will probably have a different file). But to do that
you have to become superuser. The reason for that is, as with so many other
virtual directories, messing with the contents and files in /sys can be
dangerous and you can trash your system. DO NOT TOUCH until you are sure you
know what you are doing.

*** /tmp
/tmp contains temporary files, usually placed there by applications that you are
running. The files and directories often (not always) contain data that an
application doesn’t need right now, but may need later on.

You can also use /tmp to store your own temporary files — /tmp is one of the few
directories hanging off / that you can actually interact with without becoming
superuser.

*** /var
/var was originally given its name because its contents was deemed variable, in
that it changed frequently. Today it is a bit of a misnomer because there are
many other directories that also contain data that changes frequently,
especially the virtual directories we saw above.

Be that as it may, /var contains things like logs in the /var/log
subdirectories. Logs are files that register events that happen on the
system. If something fails in the kernel, it will be logged in a file in
/var/log; if someone tries to break into your computer from outside, your
firewall will also log the attempt here. It also contains spools for
tasks. These “tasks” can be the jobs you send to a shared printer when you have
to wait because another user is printing a long document, or mail that is
waiting to be delivered to users on the system.

** IMPORTANT FILES, their location and their Usability

Linux is a complex system which requires a more complex and efficient way to
start, stop, maintain and reboot a system unlike Windows. There is a well
defined configuration files, binaries, man pages, info files, etc. for every
process in Linux.

    /boot/vmlinuz : The Linux Kernel file.
    /dev/hda : Device file for the first IDE HDD (Hard Disk Drive)
    /dev/hdc : Device file for the IDE Cdrom, commonly
    /dev/null : A pseudo device, that don’t exist. Sometime garbage output is redirected to /dev/null, so that it gets lost, forever.
    /etc/bashrc : Contains system defaults and aliases used by bash shell.
    /etc/crontab : A shell script to run specified commands on a predefined time Interval.
    /etc/exports : Information of the file system available on network.
    /etc/fstab : Information of Disk Drive and their mount point.
    /etc/group : Information of Security Group.
    /etc/grub.conf : grub bootloader configuration file.
    /etc/init.d : Service startup Script.
    /etc/lilo.conf : lilo bootloader configuration file.
    /etc/hosts : Information of Ip addresses and corresponding host names.
    /etc/hosts.allow : List of hosts allowed to access services on the local machine.
    /etc/host.deny : List of hosts denied to access services on the local machine.
    /etc/inittab : INIT process and their interaction at various run level.
    /etc/issue : Allows to edit the pre-login message.
    /etc/modules.conf : Configuration files for system modules.
    /etc/motd : motd stands for Message Of The Day, The Message users gets upon login.
    /etc/mtab : Currently mounted blocks information.
    /etc/passwd : Contains password of system users in a shadow file, a security implementation.
    /etc/printcap : Printer Information
    /etc/profile : Bash shell defaults
    /etc/profile.d : Application script, executed after login.
    /etc/rc.d : Information about run level specific script.
    /etc/rc.d/init.d : Run Level Initialisation Script.
    /etc/resolv.conf : Domain Name Servers (DNS) being used by System.
    /etc/securetty : Terminal List, where root login is possible.
    /etc/skel : Script that populates new user home directory.
    /etc/termcap : An ASCII file that defines the behaviour of Terminal, console and printers.
    /etc/X11 : Configuration files of X-window System.
    /usr/bin : Normal user executable commands.
    /usr/bin/X11 : Binaries of X windows System.
    /usr/include : Contains include files used by ‘c‘ program.
    /usr/share : Shared directories of man files, info files, etc.
    /usr/lib : Library files which are required during program compilation.
    /usr/sbin : Commands for Super User, for System Administration.
    /proc/cpuinfo : CPU Information
    /proc/filesystems : File-system Information being used currently.
    /proc/interrupts : Information about the current interrupts being utilised currently.
    /proc/ioports : Contains all the Input/Output addresses used by devices on the server.
    /proc/meminfo : Memory Usages Information.
    /proc/modules : Currently using kernel module.
    /proc/mount : Mounted File-system Information.
    /proc/stat : Detailed Statistics of the current System.
    /proc/swaps : Swap File Information.
    /version : Linux Version Information.
    /var/log/lastlog : log of last boot process.
    /var/log/messages : log of messages produced by syslog daemon at boot.
    /var/log/wtmp : list login time and duration of each user on the system currently.

* ==== TROUBLESHOOTING ===============================================

... UBUNTU 16.04 has experienced an internal error


... SLOW STARTUP:
on: Thu Feb 16 20:51:39 2017 - about 50 secs to get to login screen, then about 40 secs to load desktop...


** SOFTWARE UPDATER FAILS

FIX on Thu Feb 16 20:52:59 2017...
... make sure that all packages are updated and upgraded...
$ sudo apt-get update && sudo apt-get upgrade
... then run updater: GUI: System-->Administration-->Software Updater

* ==== GUI CUSTOMIZATION =============================================

DESKTOP WALLPAPER (lubuntu 17)
... stored in /usr/share/lubuntu/wallpapers

CHANGE LOGIN SCREEN BACKGROUND (lubuntu 17)
... change symlink...
/usr/share/lubuntu/wallpapers/lubuntu-default-wallpaper.png
... so that it points at preferred png file.

SET LOGIN PROFILE PICTURE (lubuntu 17)
... save .png image as ~/.face
... image should ideally be square.

* ============================= EMAIL ================================

CURRENT SETUP:
ssmtp --- for sending
emacs --- compose message and send via ssmtp



TODO:
ISYNC or OFFLINEIMAP ---> use mbsync/isync (lots of gripes about offlineimap on web)
NOTMUCH
EMACS (notmuch-mode)
mail stored in ~/.mail/



mutt?



** EMAIL BASICS
Sending and recieving email are may require different programs

MUA (Mail User Agent)



** SEND MAIL

SSMTP
- sends only
- very easy config

SIMPLE CONFIGURATION: (for more detail: http://www.techrepublic.com/blog/it-security/use-ssmtp-to-send-e-mail-simply-and-securely/)
... set these variables in: /etc/sstmp/sstmp.config
# root is the person who gets all mail for userids < 1000
root=ben@bschambers.info
# Here is the gmail configuration (or change it to your private smtp server)
mailhub=mail3.gridhost.co.uk # if STARTTLS not enabled, would have to specify port :465
AuthUser=ben@bschambers.info
AuthPass=***SECRET_PASSWORD***
UseTLS=YES # TLS (Transport Layer Security) is the successor to SSL (Secure Sockets Layer)
UseSTARTTLS=YES
rewriteDomain=bschambers.info
fromLineOverride=Yes


PERHAPS EXPLORE...
... use the -C option, so that you don't have to store passwords in config file...


SEND AN EMAIL WITH SSMTP:
$ ssmtp recipient@example.com
To: recipient@example.com
From: ben@bschambers.info
Subject: test

Message body...

[Ctrl-D to send]

... OR: (I like verbose mode)...
$ ssmtp -v recipient@example.com < FILE_FORMATTED_AS_ABOVE





** RECIEVE EMAIL

*** ISYNC/MBSYNC
... (isync is the name of the project, mbsync is the name of the executable)

SETUP:

$ sudo apt-get install isync

CREATE CONFIG FILE: ~/.mbsyncrc ...

CREATE ANY FOLDERS THAT WERE SPECIFIED AS MAILDIRS:
$ mkdir -p .mail/info/bschambers/ben

GET SSL CERTIFICATE FROM SERVER AND STORE IT IN FILE
$ mkdir .cert
$ openssl s_client -connect mail3.gridhost.co.uk:993 -showcerts


$ mbsync -V bschambers-ben



*** OFFLINEIMAP

SETUP
$ sudo apt-get install offlineimap

copy example config file to home dir
$ cp /usr/share/doc/offlineimap/examples/offlineimap.conf.minimal ~/.offlineimaprc

ADD TO BACKUP
~/.offlineimaprc
~/.offlineimap/
~/.mail/
~/.cert/mail3.gridhost.co.uk.pem



TROUBLESHOOTING

ERROR: No CA certificates and no server fingerprints configured.  You must configure at least something, otherwise having SSL helps nothing.

...
http://www.offlineimap.org/doc/FAQ.html#checking-the-ssl-certificate

CertificateFile ~/.cert/mail3.gridhost.co.uk.pem

sslcacertfile = ~/.cert/mail3gridhost.crt


*** MISC NOTES
postfix <--- MTA (Mail Transfer Agent)

postfix setup:
https://help.ubuntu.com/community/Postfix
https://www.digitalocean.com/community/tutorials/how-to-install-and-setup-postfix-on-ubuntu-14-04
https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-as-a-send-only-smtp-server-on-ubuntu-16-04





MAILUTILS (uses POSTFIX at MTA)
$ sudo apt-get install mailutils
... in setup, choose the unconfigured option...

mail






sendmail

mutt


telnet




** MANAGING EMAIL

NOTMUCH

Notmuch is fast, global-search and tag-based email system for use within a text editor or terminal.



SETUP

PREREQUISITES
- email messages must be stored in local filesystem, one message per file. For example, Maildir, Maildir++, and MH formats work like this, while mbox does not.

Install via package manager:
$ sudo apt-get install notmuch

** HELP/DOCUMENTATION

https://bostonenginerd.com/posts/notmuch-of-a-mail-setup-part-1-mbsync-msmtp-and-systemd/

emacs org-mode email todo list item:
http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/





*** mbsync config file notes

IMAPAccount bschambers-ben
# Address to connect to
Host mail3.gridhost.co.uk
Port 993
User ben@bschambers.info
Pass wizziPLOP
# PassCmd "gnome-keyring-query get servername_mail"
#SSLType IMAPS
SSLType starttls
SSLVersions TLSv1.2
#UseIMAPS yes
#RequireSSL yes
#UseTLSv1 no
#UseTLSv1.1 no
#UseTLSv1.2 yes
SystemCertificates no
# The following line should work. If get certificate errors, uncomment the two following lines and read the "Troubleshooting" section.
CertificateFile ~/.cert/mail3.gridhost.co.uk.pem
#CertificateFile ~/.cert/imap.gmail.com.pem
#CertificateFile ~/.cert/Equifax_Secure_CA.pem

IMAPStore gridhost-remote
Account bschambers-ben

MaildirStore gridhost-local
# The trailing "/" is important
Path ~/.mail/info/bschambers/ben/
Inbox ~/.mail/info/bschambers/ben/Inbox

Channel bschambers-ben
Master :gridhost-remote:
Slave :gridhost-local:
# Exclude everything under the internal [Gmail] folder, except the interesting folders
# Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail"
# Or include everything
Patterns *
# Automatically create missing mailboxes, both locally and on the server
Create Both
# Save the synchronization state files in the relevant directory
SyncState *

* ================== DOWNLOAD HTML5 EMBEDDED VIDEO ===================

tested on Nov 6th 2017

Inspect web page source: Ctrl+U in firefox

Search source code for actual video URL e.g. search for ".mp4" or ".avi" etc
... some sites will have multiple URLs with different video quality

Copy URL: R-click --> copy link target

Download file using terminal:
$ wget [URL]



OPTIONAL: check/preview video in VLC
MENU: Media-->Open Capture Device-->Network...
... enter URL and press play...
* =============== LUBUNTU ADD EXTRA WORKSPACE/DESKTOPS ===============
Start Menu-->Preferences-->Openbox Configuration Manager
* ============================= APPIMAGE =============================
AppImage is a universal software package format. By packaging the software in AppImage, the developer provides just one file ‘to rule them all’. End user, i.e. you, can use it in most (if not all) modern Linux distributions
AppImage doesn’t install software in the traditional way

A typical Linux software will create files at various places, requiring root permission to make these changes to the system.

AppImage doesn’t do it. In fact, AppImage doesn’t really install the software. It is a compressed image with all the dependencies and libraries needed to run the desired software.

You execute the AppImage file, you run the software. There is no extraction, no installation. You delete the AppImage file, the software is removed (we’ll see about it later). You can compare it to .exe files in Windows that allow you to run the software without actually going through the installation procedure.

Let me list some of the features or benefits of AppImage.

** USAGE:
Simply make the .appimage file executable, then run it...
* ====== GET INFO ABOUT KEY-CODES, MOUSE POSITION, WINDOWS ETC =======

Get event info interactively while you type and move mouse:
$ xev

Get info about a window - run this, then click on a window:
$ xwininfo

* ===================== RECORD VIDEO OF DESKTOP ======================
** using recordmydesktop
NOTE: install recordmydesktop from the repo using apt-get

Start recording video (full screen):
$ recordmydesktop

To stop recording, go back to terminal window and do Ctrl-C

** Setting the output file
By default, file will be saved to ~/out.ogv

To set an output file use the -o option:
$ recordmydesktop -o ~/Videos/test-vid.ogv

** To record a single window (or region of the screen)

Get size and position of window you want to record:
$ xwininfo
... then click on the desired window

Start recording
$ recordmydesktop -x X-POSITION -y Y-POSITION --width WIDTH --height HEIGHT
* ================== MAKE A GIF FROM SERIES OF PNG ===================
using ImageMagick, for series of images named tmp----.png
 $ convert -delay 4 -loop 0 tmp*.png output.gif

Online example had these extra options but it failed when I tried this:
 $ convert -delay 4 -loop 0 -layers removeDups -layers Optimize tmp*.png output.gif

* ===================== ADD A NEW FONT/TYPEFACE ======================
Can download fonts easily from the internet.

They usually come as a zip file.

Unzip and put .ttf file in one of the following locations:
- ~/.fonts
- /usr/share/fonts
- /usr/local/share/fonts
- ~/.local/share/fonts

REBUILD THE FONTS LIST:

: $ fc-cache -f -v

options used:
- -f = force regeneration even if they seem up to date (ignore timestamps)
- -v = verbose

VERIFY THE INSTALLATION:

: $ fc-list

This will list all of the fonts. There will probably be a lot of them, so use
grep to narrow down the list. Here, I want to check whether the font
/SnowForSanta/ is installed:

: $ fc-list | grep "Snow"
